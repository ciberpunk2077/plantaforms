# Generated by Django 4.2.21 on 2025-06-06 19:29

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Especie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=200)),
                ('descripcion', models.TextField(max_length=500)),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Familia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=200)),
                ('descripcion', models.TextField(max_length=500)),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Municipio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clave', models.CharField(max_length=100)),
                ('nombre', models.CharField(max_length=200)),
                ('estado', models.PositiveSmallIntegerField(choices=[(1, 'AguasCalientes'), (2, 'Baja California'), (3, 'Baja California Sur'), (4, 'Campeche'), (5, 'Coahuila'), (6, 'Colima'), (7, 'Chiapas'), (8, 'Chihuahua'), (9, 'Distrito Federal'), (10, 'Durango'), (11, 'Guanajuato'), (12, 'Guerrero'), (13, 'Hidalgo'), (14, 'Jalisco'), (15, 'México'), (16, 'Michoacán'), (17, 'Morelos'), (18, 'Nayarit'), (19, 'Nuevo León'), (20, 'Oaxaca'), (21, 'Puebla'), (22, 'Querétaro'), (23, 'Quintana Roo'), (24, 'San Luis Potosí'), (25, 'Sinaloa'), (26, 'Sonora'), (27, 'Tabasco'), (28, 'Tamaulipas'), (29, 'Tlaxcala'), (30, 'Veracruz'), (31, 'Yucatán'), (32, 'Zacatecas')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='MuestraBiologica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genero', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Femenino'), ('H', 'Hermafrodita'), ('ND', 'No determinado')], max_length=2, null=True)),
                ('nombre_cientifico', models.CharField(max_length=200)),
                ('nombre_comun', models.CharField(blank=True, max_length=200, null=True)),
                ('numero_recolecta', models.IntegerField(unique=True)),
                ('colonia', models.CharField(blank=True, max_length=200, null=True)),
                ('localidad', models.CharField(blank=True, max_length=200, null=True)),
                ('descripcion', models.TextField(blank=True, null=True)),
                ('nombre_colector', models.CharField(blank=True, max_length=200, null=True)),
                ('fecha', models.DateField(blank=True, help_text='Fecha de recolección de la muestra', null=True)),
                ('latitud', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitud', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('tipo_muestra', models.CharField(choices=[('ALGA', 'Alga'), ('PLANTA', 'Planta'), ('FRUTOSEMILLA', 'Frutosemilla'), ('POLEN', 'Polen'), ('HELECHO', 'Helecho'), ('HONGO', 'Hongo')], help_text='Tipo de muestra biológica', max_length=15)),
                ('especie', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='catalogo.especie')),
                ('municipio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalogo.municipio')),
            ],
            options={
                'verbose_name': 'Muestra Biológica',
                'verbose_name_plural': 'Muestras Biológicas',
                'permissions': [('can_export', 'Puede exportar datos de muestras'), ('can_import', 'Puede importar datos de muestras')],
            },
        ),
        migrations.AddField(
            model_name='especie',
            name='familia',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='catalogo.familia'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('rol', models.CharField(choices=[('ADMIN', 'Administrador'), ('CAPT', 'Capturista'), ('USER', 'Usuario normal')], default='USER', max_length=5)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='catalogo_user_set', related_query_name='catalogo_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='catalogo_user_set', related_query_name='catalogo_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
